// http://jshint.com/docs

{

	// SETTINGS
	"passfail"		:	false,		// Stop on first error.
	"maxerr"		:	20,		// Maximum error before stopping.

	// GLOBALS
	"browser"       : 	true,		// Web Browser (window, document, etc)
	"node"			:	true,		// Node.js
	"browserify"	:	true,		// Browserify
	"mocha"         :	true,		// Mocha
	"jquery"		:	true,		// jQuery globals
	"predef"		:	[			// project globals
		"module",
		"require",
		"Handlebars",				// Handlebars templates
		"ga"						// Google Analytics
	],

	// DEVELOPMENT
	"debug"			:	true,		// Allow debugger statements e.g. browser breakpoints.
	"devel"			:	true,		// Allow developments statements e.g. `console.log();`.

	// ES5
	"strict"		:	false,		// Included by default in ES6 modules automatically
	"globalstrict"	:	true,		// Allow global "use strict" (also enables 'strict') - prevents concatenation problems.

	// ES.next
	"esnext"		:	true,		// Use future JS syntax

	// COMPLEXITY
	"maxparams"		:	5,			// Max parameters in a function
    "maxdepth"		:	4,			// Max nesting complexity
    "maxstatements"	:	15,			// Max statements per function
    "maxcomplexity"	:	10,			// Max cyclomatic complexity - lineraly independent paths

	// THE GOOD PARTS
	"asi"			:	false,		// Tolerate Automatic Semicolon Insertion (no semicolons).
	"laxbreak"		:	false,		// Tolerate unsafe line breaks e.g. `return [\n] x` without semicolons.
	"bitwise"		:	false,		// Prohibit bitwise operators (&, |, ^, etc.).
	"boss"			:	false,		// Tolerate assignments inside if, for & while. Usually conditions & loops are for comparison, not assignments.
	"curly"			:	true,		// Require {} for every new block or scope.
	"eqeqeq"		:	true,		// Require triple equals i.e. `===`.
	"eqnull"		:	false,		// Tolerate use of `== null`.
	"evil"			:	false,		// Tolerate use of `eval`.
	"expr"			:	false,		// Tolerate `ExpressionStatement` as Programs.
	"forin"			:	false,		// Tolerate `for in` loops without `hasOwnPrototype`.
	"immed"			:	false,		// Require immediate invocations to be wrapped in parens e.g. `( function(){}() );`
	"latedef"		:	true,		// Prohibit variable use before definition.
	"loopfunc"		:	false,		// Allow functions to be defined within loops.
	"noarg"			:	true,		// Prohibit use of `arguments.caller` and `arguments.callee`.
	"regexp"		:	true,		// Prohibit `.` and `[^...]` in regular expressions.
	"regexdash"		:	false,		// Tolerate unescaped last dash i.e. `[-...]`.
	"scripturl"		:	true,		// Tolerate script-targeted URLs.
	"shadow"		:	true,		// Allows re-define variables later in code e.g. `var x=1; x=2;`.
	"supernew"		:	true,		// Tolerate `new function () { ... };` and `new Object;`.
	"undef"			:	true,		// Require all non-global variables be declared before they are used.
	"unused"		:	false,		// This option warns when you define and never use your variables.

	// STYLE DECISIONS
	"newcap"		:	true,		// Require capitalization of all constructor functions e.g. `new F()`.
	"noempty"		:	true,		// Prohibit use of empty blocks.
	"nonew"			:	true,		// Prohibit use of constructors for side-effects.
	"nomen"			:	true,		// Prohibit use of initial or trailing underbars in names.
	"onevar"		:	true,		// Allow only one `var` statement per function.
	"plusplus"		:	false,		// Prohibit use of `++` & `--`.
	"sub"			:	true,		// Tolerate all forms of subscript notation besides dot notation e.g. `dict['key']` instead of `dict.key`.
	"trailing"		:	true,		// Prohibit trailing whitespaces.
	"white"			:	true,		// Check against strict whitespace and indentation rules.
	"indent"		:	4,			// Specify indentation spacing
	//"quotmark"		:	"single",	// This option enforces the consistency of quotation marks used throughout your code.
	"smarttabs"		:	true		// This option suppresses warnings about mixed tabs and spaces when the latter are used for alignment only. The technique is called SmartTabs.
}
